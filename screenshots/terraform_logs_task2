jees-macbook:task2 jeesantony$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/archive from the dependency lock file
- Using previously-installed hashicorp/aws v3.35.0
- Using previously-installed hashicorp/archive v2.1.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
jees-macbook:task2 jeesantony$ ls -ltr
total 64
-rw-r--r--  1 jeesantony  staff   107 Apr  4 11:16 greet_lambda.py
-rw-r--r--  1 jeesantony  staff    46 Apr  4 16:08 variables.tf
-rw-r--r--  1 jeesantony  staff    72 Apr  4 16:09 outputs.tf
-rw-r--r--  1 jeesantony  staff   248 Apr  4 16:11 greet_lambda.zip
-rw-r--r--  1 jeesantony  staff  4814 Apr  4 16:18 terraform.tfstate.backup
-rw-r--r--  1 jeesantony  staff   156 Apr  4 16:18 terraform.tfstate
-rw-r--r--  1 jeesantony  staff  2298 Apr  4 16:36 main.tf
jees-macbook:task2 jeesantony$ terraform plan

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_policy.lambda_logging will be created
  + resource "aws_iam_policy" "lambda_logging" {
      + arn         = (known after apply)
      + description = "IAM policy for logging from a lambda"
      + id          = (known after apply)
      + name        = "lambda_logging"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "sqs:ReceiveMessage",
                          + "sqs:DeleteMessage",
                          + "sqs:GetQueueAttributes",
                          + "logs:CreateLogGroup",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
    }

  # aws_iam_role.iam_for_lambda will be created
  + resource "aws_iam_role" "iam_for_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "iam_for_lambda"
      + path                  = "/"
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_iam_role_policy_attachment.lambda_logs will be created
  + resource "aws_iam_role_policy_attachment" "lambda_logs" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "iam_for_lambda"
    }

  # aws_lambda_event_source_mapping.udacity-project will be created
  + resource "aws_lambda_event_source_mapping" "udacity-project" {
      + enabled                       = true
      + event_source_arn              = (known after apply)
      + function_arn                  = (known after apply)
      + function_name                 = (known after apply)
      + id                            = (known after apply)
      + last_modified                 = (known after apply)
      + last_processing_result        = (known after apply)
      + maximum_record_age_in_seconds = (known after apply)
      + maximum_retry_attempts        = (known after apply)
      + parallelization_factor        = (known after apply)
      + state                         = (known after apply)
      + state_transition_reason       = (known after apply)
      + uuid                          = (known after apply)
    }

  # aws_lambda_function.greet_lambda will be created
  + resource "aws_lambda_function" "greet_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.8"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = "ur916JfwgSrixzE3Q+9AcUAF7pR3R8nnnaieTSu/ooI="
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "greeting" = "Hi from Udacity Student Jees"
            }
        }

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_sqs_queue.udacity_queue will be created
  + resource "aws_sqs_queue" "udacity_queue" {
      + arn                               = (known after apply)
      + content_based_deduplication       = false
      + delay_seconds                     = 0
      + fifo_queue                        = false
      + id                                = (known after apply)
      + kms_data_key_reuse_period_seconds = (known after apply)
      + max_message_size                  = 4096
      + message_retention_seconds         = 360
      + name                              = "udacity-project-queue"
      + policy                            = (known after apply)
      + receive_wait_time_seconds         = 0
      + visibility_timeout_seconds        = 30
    }

  # aws_subnet.udacity will be created
  + resource "aws_subnet" "udacity" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = (known after apply)
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.31.32.0/20"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags_all                        = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.udacity will be created
  + resource "aws_vpc" "udacity" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "172.31.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "udacity"
        }
      + tags_all                         = {
          + "Name" = "udacity"
        }
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + greet_lambda = (known after apply)

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

jees-macbook:task2 jeesantony$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_policy.lambda_logging will be created
  + resource "aws_iam_policy" "lambda_logging" {
      + arn         = (known after apply)
      + description = "IAM policy for logging from a lambda"
      + id          = (known after apply)
      + name        = "lambda_logging"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "sqs:ReceiveMessage",
                          + "sqs:DeleteMessage",
                          + "sqs:GetQueueAttributes",
                          + "logs:CreateLogGroup",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
    }

  # aws_iam_role.iam_for_lambda will be created
  + resource "aws_iam_role" "iam_for_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "iam_for_lambda"
      + path                  = "/"
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_iam_role_policy_attachment.lambda_logs will be created
  + resource "aws_iam_role_policy_attachment" "lambda_logs" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "iam_for_lambda"
    }

  # aws_lambda_event_source_mapping.udacity-project will be created
  + resource "aws_lambda_event_source_mapping" "udacity-project" {
      + enabled                       = true
      + event_source_arn              = (known after apply)
      + function_arn                  = (known after apply)
      + function_name                 = (known after apply)
      + id                            = (known after apply)
      + last_modified                 = (known after apply)
      + last_processing_result        = (known after apply)
      + maximum_record_age_in_seconds = (known after apply)
      + maximum_retry_attempts        = (known after apply)
      + parallelization_factor        = (known after apply)
      + state                         = (known after apply)
      + state_transition_reason       = (known after apply)
      + uuid                          = (known after apply)
    }

  # aws_lambda_function.greet_lambda will be created
  + resource "aws_lambda_function" "greet_lambda" {
      + arn                            = (known after apply)
      + filename                       = "greet_lambda.zip"
      + function_name                  = "greet_lambda"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.8"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + source_code_hash               = "ur916JfwgSrixzE3Q+9AcUAF7pR3R8nnnaieTSu/ooI="
      + source_code_size               = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "greeting" = "Hi from Udacity Student Jees"
            }
        }

      + tracing_config {
          + mode = (known after apply)
        }
    }

  # aws_sqs_queue.udacity_queue will be created
  + resource "aws_sqs_queue" "udacity_queue" {
      + arn                               = (known after apply)
      + content_based_deduplication       = false
      + delay_seconds                     = 0
      + fifo_queue                        = false
      + id                                = (known after apply)
      + kms_data_key_reuse_period_seconds = (known after apply)
      + max_message_size                  = 4096
      + message_retention_seconds         = 360
      + name                              = "udacity-project-queue"
      + policy                            = (known after apply)
      + receive_wait_time_seconds         = 0
      + visibility_timeout_seconds        = 30
    }

  # aws_subnet.udacity will be created
  + resource "aws_subnet" "udacity" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = (known after apply)
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "172.31.32.0/20"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags_all                        = (known after apply)
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.udacity will be created
  + resource "aws_vpc" "udacity" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "172.31.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = (known after apply)
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = (known after apply)
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Name" = "udacity"
        }
      + tags_all                         = {
          + "Name" = "udacity"
        }
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + greet_lambda = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_role.iam_for_lambda: Creating...
aws_sqs_queue.udacity_queue: Creating...
aws_iam_policy.lambda_logging: Creating...
aws_vpc.udacity: Creating...
aws_iam_policy.lambda_logging: Creation complete after 3s [id=arn:aws:iam::755448775693:policy/lambda_logging]
aws_sqs_queue.udacity_queue: Creation complete after 3s [id=https://sqs.us-west-2.amazonaws.com/755448775693/udacity-project-queue]
aws_iam_role.iam_for_lambda: Creation complete after 4s [id=iam_for_lambda]
aws_iam_role_policy_attachment.lambda_logs: Creating...
aws_iam_role_policy_attachment.lambda_logs: Creation complete after 3s [id=iam_for_lambda-20210404110719259200000001]
aws_lambda_function.greet_lambda: Creating...
aws_vpc.udacity: Still creating... [10s elapsed]
aws_lambda_function.greet_lambda: Still creating... [10s elapsed]
aws_vpc.udacity: Creation complete after 18s [id=vpc-0bf637838177d77ae]
aws_subnet.udacity: Creating...
aws_lambda_function.greet_lambda: Creation complete after 15s [id=greet_lambda]
aws_lambda_event_source_mapping.udacity-project: Creating...
aws_subnet.udacity: Still creating... [10s elapsed]
aws_lambda_event_source_mapping.udacity-project: Still creating... [10s elapsed]
aws_subnet.udacity: Creation complete after 15s [id=subnet-058636a9cdd930ff2]
aws_lambda_event_source_mapping.udacity-project: Still creating... [20s elapsed]
aws_lambda_event_source_mapping.udacity-project: Creation complete after 26s [id=77487c8f-2b13-4a35-a61a-c44640f91a34]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.

Outputs:

greet_lambda = "greet_lambda"
jees-macbook:task2 jeesantony$ terraform state
Usage: terraform state <subcommand> [options] [args]

  This command has subcommands for advanced state management.

  These subcommands can be used to slice and dice the Terraform state.
  This is sometimes necessary in advanced cases. For your safety, all
  state management commands that modify the state create a timestamped
  backup of the state prior to making modifications.

  The structure and output of the commands is specifically tailored to work
  well with the common Unix utilities such as grep, awk, etc. We recommend
  using those tools to perform more advanced state tasks.

Subcommands:
    list                List resources in the state
    mv                  Move an item in the state
    pull                Pull current state and output to stdout
    push                Update remote state from a local state file
    replace-provider    Replace provider in the state
    rm                  Remove instances from the state
    show                Show a resource in the state
jees-macbook:task2 jeesantony$ terraform state list
data.archive_file.lambda-archive
aws_iam_policy.lambda_logging
aws_iam_role.iam_for_lambda
aws_iam_role_policy_attachment.lambda_logs
aws_lambda_event_source_mapping.udacity-project
aws_lambda_function.greet_lambda
aws_sqs_queue.udacity_queue
aws_subnet.udacity
aws_vpc.udacity
jees-macbook:task2 jeesantony$



jees-macbook:task2 jeesantony$ terraform destroy

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_iam_policy.lambda_logging will be destroyed
  - resource "aws_iam_policy" "lambda_logging" {
      - arn         = "arn:aws:iam::755448775693:policy/lambda_logging" -> null
      - description = "IAM policy for logging from a lambda" -> null
      - id          = "arn:aws:iam::755448775693:policy/lambda_logging" -> null
      - name        = "lambda_logging" -> null
      - path        = "/" -> null
      - policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "sqs:ReceiveMessage",
                          - "sqs:DeleteMessage",
                          - "sqs:GetQueueAttributes",
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                        ]
                      - Effect   = "Allow"
                      - Resource = "*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id   = "ANPA27ZCBQQG7EWM7RLNB" -> null
    }

  # aws_iam_role.iam_for_lambda will be destroyed
  - resource "aws_iam_role" "iam_for_lambda" {
      - arn                   = "arn:aws:iam::755448775693:role/iam_for_lambda" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                      - Sid       = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2021-04-04T11:07:15Z" -> null
      - force_detach_policies = false -> null
      - id                    = "iam_for_lambda" -> null
      - managed_policy_arns   = [] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "iam_for_lambda" -> null
      - path                  = "/" -> null
      - unique_id             = "AROA27ZCBQQGYXZLMMRYZ" -> null

      - inline_policy {}
    }

  # aws_iam_role_policy_attachment.lambda_logs will be destroyed
  - resource "aws_iam_role_policy_attachment" "lambda_logs" {
      - id         = "iam_for_lambda-20210404110719259200000001" -> null
      - policy_arn = "arn:aws:iam::755448775693:policy/lambda_logging" -> null
      - role       = "iam_for_lambda" -> null
    }

  # aws_lambda_event_source_mapping.udacity-project will be destroyed
  - resource "aws_lambda_event_source_mapping" "udacity-project" {
      - batch_size                         = 10 -> null
      - bisect_batch_on_function_error     = false -> null
      - enabled                            = true -> null
      - event_source_arn                   = "arn:aws:sqs:us-west-2:755448775693:udacity-project-queue" -> null
      - function_arn                       = "arn:aws:lambda:us-west-2:755448775693:function:greet_lambda" -> null
      - function_name                      = "arn:aws:lambda:us-west-2:755448775693:function:greet_lambda" -> null
      - id                                 = "77487c8f-2b13-4a35-a61a-c44640f91a34" -> null
      - last_modified                      = "2021-04-04T11:07:37Z" -> null
      - maximum_batching_window_in_seconds = 0 -> null
      - maximum_record_age_in_seconds      = 0 -> null
      - maximum_retry_attempts             = 0 -> null
      - parallelization_factor             = 0 -> null
      - state                              = "Enabled" -> null
      - state_transition_reason            = "USER_INITIATED" -> null
      - uuid                               = "77487c8f-2b13-4a35-a61a-c44640f91a34" -> null
    }

  # aws_lambda_function.greet_lambda will be destroyed
  - resource "aws_lambda_function" "greet_lambda" {
      - arn                            = "arn:aws:lambda:us-west-2:755448775693:function:greet_lambda" -> null
      - filename                       = "greet_lambda.zip" -> null
      - function_name                  = "greet_lambda" -> null
      - handler                        = "greet_lambda.lambda_handler" -> null
      - id                             = "greet_lambda" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:755448775693:function:greet_lambda/invocations" -> null
      - last_modified                  = "2021-04-04T11:07:26.804+0000" -> null
      - memory_size                    = 128 -> null
      - package_type                   = "Zip" -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-west-2:755448775693:function:greet_lambda:$LATEST" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::755448775693:role/iam_for_lambda" -> null
      - runtime                        = "python3.8" -> null
      - source_code_hash               = "ur916JfwgSrixzE3Q+9AcUAF7pR3R8nnnaieTSu/ooI=" -> null
      - source_code_size               = 248 -> null
      - timeout                        = 3 -> null
      - version                        = "$LATEST" -> null

      - environment {
          - variables = {
              - "greeting" = "Hi from Udacity Student Jees"
            } -> null
        }

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

  # aws_sqs_queue.udacity_queue will be destroyed
  - resource "aws_sqs_queue" "udacity_queue" {
      - arn                               = "arn:aws:sqs:us-west-2:755448775693:udacity-project-queue" -> null
      - content_based_deduplication       = false -> null
      - delay_seconds                     = 0 -> null
      - fifo_queue                        = false -> null
      - id                                = "https://sqs.us-west-2.amazonaws.com/755448775693/udacity-project-queue" -> null
      - kms_data_key_reuse_period_seconds = 300 -> null
      - max_message_size                  = 4096 -> null
      - message_retention_seconds         = 360 -> null
      - name                              = "udacity-project-queue" -> null
      - receive_wait_time_seconds         = 0 -> null
      - visibility_timeout_seconds        = 30 -> null
    }

  # aws_subnet.udacity will be destroyed
  - resource "aws_subnet" "udacity" {
      - arn                             = "arn:aws:ec2:us-west-2:755448775693:subnet/subnet-058636a9cdd930ff2" -> null
      - assign_ipv6_address_on_creation = false -> null
      - availability_zone               = "us-west-2b" -> null
      - availability_zone_id            = "usw2-az2" -> null
      - cidr_block                      = "172.31.32.0/20" -> null
      - id                              = "subnet-058636a9cdd930ff2" -> null
      - map_customer_owned_ip_on_launch = false -> null
      - map_public_ip_on_launch         = true -> null
      - owner_id                        = "755448775693" -> null
      - tags_all                        = {} -> null
      - vpc_id                          = "vpc-0bf637838177d77ae" -> null
    }

  # aws_vpc.udacity will be destroyed
  - resource "aws_vpc" "udacity" {
      - arn                              = "arn:aws:ec2:us-west-2:755448775693:vpc/vpc-0bf637838177d77ae" -> null
      - assign_generated_ipv6_cidr_block = false -> null
      - cidr_block                       = "172.31.0.0/16" -> null
      - default_network_acl_id           = "acl-01f30d7f85793131b" -> null
      - default_route_table_id           = "rtb-00d41c98b1f3d76fa" -> null
      - default_security_group_id        = "sg-0ec3a353ace12d307" -> null
      - dhcp_options_id                  = "dopt-d37ee4ab" -> null
      - enable_classiclink               = false -> null
      - enable_classiclink_dns_support   = false -> null
      - enable_dns_hostnames             = false -> null
      - enable_dns_support               = true -> null
      - id                               = "vpc-0bf637838177d77ae" -> null
      - instance_tenancy                 = "default" -> null
      - main_route_table_id              = "rtb-00d41c98b1f3d76fa" -> null
      - owner_id                         = "755448775693" -> null
      - tags                             = {
          - "Name" = "udacity"
        } -> null
      - tags_all                         = {
          - "Name" = "udacity"
        } -> null
    }

Plan: 0 to add, 0 to change, 8 to destroy.

Changes to Outputs:
  - greet_lambda = "greet_lambda" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_lambda_event_source_mapping.udacity-project: Destroying... [id=77487c8f-2b13-4a35-a61a-c44640f91a34]
aws_subnet.udacity: Destroying... [id=subnet-058636a9cdd930ff2]
aws_lambda_event_source_mapping.udacity-project: Destruction complete after 2s
aws_sqs_queue.udacity_queue: Destroying... [id=https://sqs.us-west-2.amazonaws.com/755448775693/udacity-project-queue]
aws_lambda_function.greet_lambda: Destroying... [id=greet_lambda]
aws_subnet.udacity: Destruction complete after 3s
aws_vpc.udacity: Destroying... [id=vpc-0bf637838177d77ae]
aws_lambda_function.greet_lambda: Destruction complete after 1s
aws_iam_role_policy_attachment.lambda_logs: Destroying... [id=iam_for_lambda-20210404110719259200000001]
aws_sqs_queue.udacity_queue: Destruction complete after 1s
aws_vpc.udacity: Destruction complete after 1s
aws_iam_role_policy_attachment.lambda_logs: Destruction complete after 1s
aws_iam_policy.lambda_logging: Destroying... [id=arn:aws:iam::755448775693:policy/lambda_logging]
aws_iam_role.iam_for_lambda: Destroying... [id=iam_for_lambda]
aws_iam_policy.lambda_logging: Destruction complete after 2s
aws_iam_role.iam_for_lambda: Destruction complete after 3s

Destroy complete! Resources: 8 destroyed.
jees-macbook:task2 jeesantony$